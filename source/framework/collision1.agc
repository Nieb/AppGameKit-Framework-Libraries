///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//      Proper range-check that works for both Integer & Float values.
//
//               (P >= Min)     &    (P < Max)
//                |                   |
//                |                   |
//                V                   V
//                #=========#=========
//      ^---------^---------^---------^---------^
//     -2        -1         0         1         2
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION PointvsRange( Point_Pos AS FLOAT,
                       Range_Pos AS FLOAT, Range_Len AS FLOAT )  // Length must be positive.
    IF (Point_Pos >= Range_Pos AND Point_Pos < Range_Pos+Range_Len) THEN EXITFUNCTION 1
ENDFUNCTION 0


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FUNCTION RangevsRange( Range1_Pos AS FLOAT, Range1_Len AS FLOAT,
                       Range2_Pos AS FLOAT, Range2_Len AS FLOAT )  // Length must be positive.
    IF (Range1_Pos < Range2_Pos+Range2_Len AND Range1_Pos+Range1_Len >= Range2_Pos) THEN EXITFUNCTION 1
ENDFUNCTION 0

